image:
  broker:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  brokerSts:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  function:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  zookeeper:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  bookkeeper:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  proxy:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0
  bastion:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.10_4.0

fullnameOverride: mypulsar
enableAntiAffinity: true
enableTls: true
enableTokenAuth: true
restartOnConfigMapChange:
  enabled: true
extra:
  broker: true
  brokerSts: false
  function: true
  burnell: true
  burnellLogCollector: true
  pulsarHeartbeat: true
  pulsarAdminConsole: true

cert-manager:
  enabled: true

createCertificates:
  selfSigned:
    enabled: true

zookeeper:
  replicaCount: 3
  resources:
    requests:
      memory: 512Mi
      cpu: 0.5
  configData:
    PULSAR_MEM: "-Xms512m -Xmx512m -Djute.maxbuffer=10485760 -XX:+ExitOnOutOfMemoryError"
  volumes:
    data:
      name: data
      size: 2Gi

bookkeeper:
  replicaCount: 2
  resources:
    requests:
      memory: 1024Mi
      cpu: 0.5
  volumes:
    journal:
      name: journal
      size: 2Gi
    ledgers:
      name: ledgers
      size: 5Gi
  configData:
    BOOKIE_MEM: "-Xms800m -Xmx800m -XX:MaxDirectMemorySize=224m -XX:+ExitOnOutOfMemoryError"

##
# This is a temporary workaround to bypass the following error in the init container of pulsarHeartbeat Pod
# "Could not resolve host: pulsar-brokersts.default.svc.cluster.local"
# https://github.com/datastax/pulsar-helm-chart/blob/1af6b7c0f6036c9a0ebdaef158db5875b8d4260e/helm-chart-sources/pulsar/templates/pulsar-heartbeat/pulsar-heartbeat-deployment.yaml#L87-L95
brokerSts:
  component: broker

broker:
  component: broker
  replicaCount: 2
  service:
    type: ClusterIP
    headless: false
    ports:
      - name: http
        port: 8080
      - name: https
        port: 8443
      - name: pulsar
        port: 6650
      - name: pulsarssl
        port: 6651
      - name: kafkaplaintext
        port: 9092
      - name: kafkassl
        port: 9093
      - name: kafkaschemareg
        port: 8081
  ledger:
    defaultEnsembleSize: 1
    defaultAckQuorum: 1
    defaultWriteQuorum: 1
  resources:
    requests:
      memory: 1024Mi
      cpu: 1.0
  configData:
    PULSAR_MEM: "-Xms800m -Xmx800m -XX:MaxDirectMemorySize=224m -XX:+ExitOnOutOfMemoryError"
    transactionCoordinatorEnabled: "true"
    brokerDeleteInactiveTopicsEnabled: "false"
    allowAutoTopicCreationType: "partitioned"
    PULSAR_PREFIX_protocolHandlerDirectory: "./protocols"
    PULSAR_PREFIX_messagingProtocols: "kafka"
    PULSAR_PREFIX_brokerEntryMetadataInterceptors: "org.apache.pulsar.common.intercept.AppendIndexMetadataInterceptor,org.apache.pulsar.common.intercept.AppendBrokerTimestampMetadataInterceptor"
    PULSAR_PREFIX_kafkaTransactionCoordinatorEnabled: "true"
    PULSAR_PREFIX_kopSchemaRegistryEnable: "true"
    ####PULSAR_PREFIX_kopSchemaRegistryProxyEnableTls: "true"
    PULSAR_PREFIX_saslAllowedMechanisms: PLAIN
    ####PULSAR_PREFIX_kafkaListeners: "SASL_SSL://0.0.0.0:9093"
    PULSAR_PREFIX_kafkaListeners: "SASL_PLAINTEXT://0.0.0.0:9092"
    ## This line is required
    ####PULSAR_PREFIX_kafkaAdvertisedListeners: "SASL_SSL://advertisedAddress:9093"
    PULSAR_PREFIX_kafkaAdvertisedListeners: "SASL_PLAINTEXT://advertisedAddress:9092"


autoRecovery:
  enableProvisionContainer: true
  resources:
    requests:
      memory: 500Mi
      cpu: 0.5

function:
  replicaCount: 1
  functionReplicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.5
  volumes:
    data:
      name: logs
      size: 1Gi
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=112m -XX:+ExitOnOutOfMemoryError"

proxy:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.5
  wsResources:
    requests:
      memory: 512Mi
      cpu: 0.5
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=112m"
    PULSAR_PREFIX_kopSchemaRegistryEnable: "true"
    PULSAR_PREFIX_kafkaTransactionCoordinatorEnabled: "true"
    PULSAR_PREFIX_kopSchemaRegistryProxyPort: "8081"
    PULSAR_PREFIX_kopSchemaRegistryProxyEnableTls: "true"
    PULSAR_PREFIX_saslAllowedMechanisms: PLAIN
    PULSAR_PREFIX_kafkaProxySuperUserRole: superuser
    PULSAR_PREFIX_kafkaListeners: "SASL_SSL://0.0.0.0:9093"
    # if you use port forwarding to localhost then you have to set 'localhost'    
    PULSAR_PREFIX_kafkaAdvertisedListeners: "SASL_SSL://localhost:9093"
  autoPortAssign:
    enablePlainTextWithTLS: false
  service:
    autoPortAssign:
      enabled: false
  extensions:
    enabled: true
    extensions: "kafka"
    containerPorts:
      - name: https
        containerPort: 8443
      - name: pulsarssl
        containerPort: 6651
      - name: kafkassl
        containerPort: 9093
      - name: kafkaschemareg
        containerPort: 8081
    servicePorts:
      - name: https
        protocol: TCP
        port: 8443
      - name: pulsarssl
        protocol: TCP
        port: 6651
      - name: kafkassl
        port: 9093
        protocol: TCP
        targetPort: kafkassl
      - name: kafkaschemareg
        port: 8081
        protocol: TCP
        targetPort: kafkaschemareg

pulsarAdminConsole:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.5

grafanaDashboards:
  enabled: true

kube-prometheus-stack:
  enabled: true
  prometheusOperator:
    enabled: false
  nodeExporter:
    enabled: false
  grafana:
    enabled: true
    adminPassword: e9JYtk83*4#PM8