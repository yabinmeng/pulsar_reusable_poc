##
# Scenario specific settings to kick off the demo
# ----------------------------------
scenario.name=demo-s4r-client
scenario.id=scn01
scenario.description=Starlight for RabbitMQ Queue producer and consumer, using native RabbitMQ APIs

##
# Infrastructure mode
# - astra         : use Astra Streaming as the underlying infrastrucutre
# - luna_existing : use an existing Luna Streaming cluster as the underlying infrastructure
# - luna_new      : create a new K8s cluster and a Luna Streaming cluster as the underlying infrastructure
scenario.infra_mode=astra
#scenario.infra_mode=luna_existing
#scenario.infra_mode=astra

# The file location of `client.conf`
# - by default they're under '<scenarios>/<scenario_name>/appconf' if not specified
# - for 'luna_new' these files will be auto-generated under the default location
# - for 'astra' and 'luna_existing', you can specify a custom location
#
# NOTE: regarding JWT token, this expects in `client.conf` file, it is provided as the
#       format of "token:<token_string>" instead of "file:<file_path>".
#       This can be a TBD task!
#
#scenario.clientconf.location=/home/pat/newproject/pulsar_workshop/scenarios/demo-s4r-client/appconf/rabbitmq.conf

##
# The list of the example applications to be included in this demo
scenario.app.ids=s4r_rabbitmq_queue_producer,s4r_rabbitmq_queue_consumer
# The specific parameters for each included application
# RabbitMQ on Astra Streaming example parameters
# -useAstra true if clients are connecting to Astra Streaming with RabbitMQ enabled. SSL will also be enabled.
# -q or -s4rqueue to specify the RabbitMQ queue to produce or consume too
# -num or numMsg to specify the number of messages to produce or consume then stop executing 
# -c or rabbitmqconf to specify the rabbitmq.conf file to use.  See example file in appconf directory
# -m or s4rmessage to specify a message string to send with the Producer.  This option is ignored for consumers
scenario.app.param.s4r_rabbitmq_queue_producer -useAstra true -q my_s4r_queue -num 10 -c appconf/rabbitmq.conf -m "This is my RabbitMQ client message."
#scenario.app.param.s4r_rabbitmq_queue_producer -useAstra true -q my_s4r_queue -num 10 -c appconf/rabbitmq.conf
scenario.app.param.s4r_rabbitmq_queue_consumer -useAstra true -q my_s4r_queue -num 100 -c appconf/rabbitmq.conf

# RabbitMQ on Luna or Pulsar example parameters
#scenario.app.param.s4r_rabbitmq_queue_producer -q my_s4r_queue -num 10 -c appconf/rabbitmq.conf
#scenario.app.param.s4r_rabbitmq_queue_consumer -q my_s4r_queue -num 100 -c appconf/rabbitmq.conf

##
# Luna Streaming related settings 
# - Only relevant when "infra_mode" is 'luna_new'
# ----------------------------------
#
# [NOTE]
#   Using "luna streaming" demo mode, it requires provisioning the following artifacts:
#   * a K8s cluster (see cluster_deploy/k8s.properties)
#   * a Pulsar cluster (see cluster_deploy/pulsar.properties)
#   * any relevant external tools (see cluster_deploy/ext_tools.properties)
#
# ----------------------------------

# Whether to upgrade the existing Pulsar cluster
# - true : upgrade
# - false: don't upgrade 
ls.upgrade.existing.pulsar=false